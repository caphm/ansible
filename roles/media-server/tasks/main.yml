- name: Create media-server appdata directories
  file:
    dest: "{{item}}"
    state: directory
    owner: "{{defaultuser.uid}}"
    group: "{{defaultuser.maingid}}"
  loop:
    - "{{plex_home}}"
    - "{{plex_home}}/certs"
    - "{{filebot_home}}"
    - "{{jdownloader_home}}"

- name: upload the filebot Dockerfile to the docker host
  copy:
    src: "{{item}}"
    dest: "{{filebot_home}}/"
    owner: "{{defaultuser.uid}}"
    group: "{{defaultuser.maingid}}"
    mode: 0755
  loop:
    - Dockerfile
    - filebot-node
  register: filebot_dockerfile

- name: Start docker app media-server
  docker_service:
    project_name: media-server
    state: present
    build: "{{force_update or filebot_dockerfile.changed}}"
    pull: "{{force_update}}"
    restarted: "{{force_update or filebot_dockerfile.changed}}"
    definition:
      version: '3.5'
      services:
        plex:
          image: plexinc/pms-docker:latest
          container_name: plex
          hostname: plex
          stdin_open: true
          tty: true
          restart: always
          volumes:
            - "{{plex_home}}:/config"
            - "{{arraypath}}/media:/library"
            - "{{arraypath}}/media:{{arraypath}}/media"
          networks:
            - web
          ports:
            - "1900:1900/udp"
            - "3005:3005/tcp"
            - "8324:8324/tcp"
            # - "32400:32400/tcp"
            - "32410:32410/udp"
            - "32412:32412/udp"
            - "32413:32413/udp"
            - "32414:32414/udp"
            - "32469:32469/tcp"
          environment:
            - "PLEX_CLAIM={{plex_claim_token}}"
            - "PLEX_UID={{defaultuser.uid}}"
            - "PLEX_GID={{defaultuser.maingid}}"
            - "ADVERTISE_IP=https://{{ plex_url }}"
            - CHANGE_CONFIG_DIR_OWNERSHIP=false
            - TZ=Europe/Berlin
            - "ALLOWED_NETWORKS={{ansible_default_ipv4.address}}/24"
          labels:
            traefik.enable: "true"
            traefik.frontend.rule: "Host:{{ plex_url }}"
            traefik.docker.network: "web"
            traefik.port: "32400"

        filebot:
          build: "{{filebot_home}}"
          container_name: filebot
          hostname: filebot
          stdin_open: true
          tty: true
          restart: always
          volumes:
            - "{{filebot_home}}:/data"
            - "{{arraypath}}/downloads:/download"
            - "{{arraypath}}/media:/out"
          networks:
            - web
          labels:
            traefik.fqdn.frontend.rule: "Host:{{ docker_host }};PathPrefix:{{filebot_path}}"
            traefik.hostname.frontend.rule: "Host:{{ docker_host_hostname }};PathPrefix:{{filebot_path}}"
            traefik.ip.frontend.rule: "Host:{{ ansible_default_ipv4.address }};PathPrefix:{{filebot_path}}"
            traefik.local.frontend.rule: "Host:localhost;PathPrefix:{{filebot_path}}"
            traefik.docker.network: "web"
            traefik.port: "5452"
            traefik.enable: "true"

        jdownloader:
          image: aptalca/docker-jdownloader2
          container_name: jdownloader
          hostname: jdownloader
          stdin_open: true
          tty: true
          restart: always
          volumes:
            - "{{jdownloader_home}}:/config"
            - "{{arraypath}}/downloads:/download"
          networks:
            - web
          environment:
            - WIDTH=1280
            - HEIGHT=720
            - TZ=Europe/Berlin
            - "USER_ID={{defaultuser.uid}}"
            - "GROUP_ID={{defaultuser.maingid}}"
          labels:
            traefik.fqdn.frontend.rule: "Host:{{ docker_host }};PathPrefixStrip:{{jdownloader_path}}"
            traefik.hostname.frontend.rule: "Host:{{ docker_host_hostname }};PathPrefixStrip:{{jdownloader_path}}"
            traefik.ip.frontend.rule: "Host:{{ ansible_default_ipv4.address }};PathPrefixStrip:{{jdownloader_path}}"
            traefik.local.frontend.rule: "Host:localhost;PathPrefixStrip:{{jdownloader_path}}"
            traefik.docker.network: "web"
            traefik.port: "8080"
            traefik.enable: "true"

      networks:
        web:
          external:
            name: web

- name: Copy script to convert Letsencrypt certificate to PKCS12
  template:
    src: convert-certificate.sh.j2
    dest: "{{plex_home}}/certs/convert-certificate.sh"
    owner: "{{defaultuser.uid}}"
    group: "{{defaultuser.maingid}}"
    mode: 0755

- name: Add cronjob to convert new certificates automatically
  cron:
    user: "root"
    job: "{{plex_home}}/certs/convert-certificate.sh"
    name: "convert-plex-certificate"
    weekday: "*"
    minute: "00"
    hour: "01"
    dom: "*"
