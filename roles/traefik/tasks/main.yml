- name: Create appdata directory for Traefik
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ defaultuser.uid }}"
    group: "{{ defaultuser.maingid }}"
  loop:
    - "{{ traefik_home }}"
    - "{{ certdumper_home }}"
    - "{{ dnsproxy_home }}"
    - "{{ ssl_path }}"
    - "{{ ssl_certs_path }}"
    - "{{ ssl_private_path }}"
    - "{{ ssl_path }}/pem"

- name: Download root CA certificate for use by other apps
  get_url:
    url: https://letsencrypt.org/certs/isrgrootx1.pem.txt
    dest: "{{ isrg_root_cert }}"

- name: Setup acme.json
  file:
    path: "{{ traefik_home }}/acme.json"
    state: touch
    owner: "{{ defaultuser.uid }}"
    group: "{{ defaultuser.maingid }}"
    mode: 0600

- name: Setup traefik.toml
  template:
    src: traefik.toml.j2
    dest: "{{ traefik_home }}/traefik.toml"
    owner: "{{ defaultuser.uid }}"
    group: "{{ defaultuser.maingid }}"
    mode: 0600
  register: traefik_config

- name: upload the certdumper Dockerfile to the docker host
  copy:
    src: "{{item}}"
    dest: "{{ certdumper_home }}"
    owner: "{{defaultuser.uid}}"
    group: "{{defaultuser.maingid}}"
    mode: 0755
  loop:
    - certdumper/Dockerfile
    - certdumper/certdumper.sh
  register: certdumper_dockerfile

- name: Create docker networks
  docker_network:
    name: "{{ item.key }}"
    state: present
    driver: bridge
    ipam_driver: default
    ipam_options:
      subnet: "{{ item.value.subnet }}"
  loop: "{{networks|dict2items"

- name: Start docker service traefik
  docker_service:
    project_name: traefik
    state: present
    pull: "{{force_update}}"
    build: "{{force_update or certdumper_dockerfile.changed}}"
    restarted: "{{force_update or traefik_config.changed}}"
    definition:
      version: "3.5"
      services:
        traefik:
          image: traefik:alpine
          container_name: traefik
          hostname: traefik
          stdin_open: true
          tty: true
          restart: always
          networks:
            web:
              ipv4_address: "{{networks.web.subnet.split('/')[0]}}"
          ports:
            - "80:80"
            - "443:443"
            - "8888:8888"
          volumes:
            - "{{ traefik_home }}/traefik.toml:/etc/traefik/traefik.toml"
            - "{{ traefik_home }}/acme.json:/acme.json"
            - /var/run/docker.sock:/var/run/docker.sock
          environment:
            - "TZ=Europe/Berlin"
            - "CF_API_EMAIL={{email_address}}"
            - "CF_API_KEY={{cf_api_key}}"
          labels:
            traefik.fqdn.frontend.rule: "Host:{{ docker_host }};PathPrefixStrip:{{ traefik_path }}"
            traefik.hostname.frontend.rule: "Host:{{ docker_host_hostname }};PathPrefixStrip:{{ traefik_path }}"
            traefik.ip.frontend.rule: "Host:{{ ansible_default_ipv4.address }};PathPrefixStrip:{{ traefik_path }}"
            traefik.local.frontend.rule: "Host:localhost;PathPrefixStrip:{{ traefik_path }}"
            traefik.docker.network: "web"
            traefik.port: "8888"
            traefik.enable: "true"
            traefik.frontend.headers.SSLRedirect: "true"
            traefik.frontend.headers.STSSeconds: 315360000
            traefik.frontend.headers.browserXSSFilter: "true"
            traefik.frontend.headers.contentTypeNosniff: "true"
            traefik.frontend.headers.forceSTSHeader: "true"
            traefik.frontend.headers.SSLHost: "caphm.de"
            traefik.frontend.headers.STSIncludeSubdomains: "true"
            traefik.frontend.headers.STSPreload: "true"
            traefik.frontend.headers.frameDeny: "true"

        certdumper:
          build: "{{ certdumper_home }}"
          container_name: certdumper
          hostname: certdumper
          stdin_open: true
          tty: true
          user: "{{defaultuser.uid}}:{{defaultuser.maingid}}"
          restart: always
          network_mode: none
          volumes:
            - "{{ traefik_home }}/acme.json:/traefik/acme.json:ro"
            - "{{ ssl_path }}:/traefik/ssl"

        dns-proxy:
          image: defreitas/dns-proxy-server
          container_name: dns-proxy
          hostname: dns-proxy
          stdin_open: true
          tty: true
          restart: always
          networks:
            - web
            - iot
          ports:
            - "5380:5380"
          volumes:
            - "{{ dnsproxy_home }}:/app/conf"
            - /var/run/docker.sock:/var/run/docker.sock
            - /etc/resolv.conf:/etc/resolv.conf

      networks:
        iot:
          external:
            name: iot
        web:
          external:
            name: web
